module Euler92 where
import Data.List
digits :: Integer -> [Integer]
digits 0 = []
digits x = (mod x 10) : digits (div x 10)

square :: Integer -> Integer
square x = x*x

next :: Integer -> Integer
next x = sum (map square (digits x))
nnnext x = next (next (next x))
check x
 | next x == 1 = 0
 | next x == 89 = 1
 | otherwise = check (next x)
 
checkF :: [Integer] -> Integer
checkF x = bInt (map (flip elem xD) (map nnnext x))

runS x = sum $ map check [1..x]
run x = checkF [1..x]

bInt :: [Bool] -> Integer
bInt [] = 0
bInt (x:xs) = (if x then 1 else 0 ) + bInt xs

xD :: [Integer]
-- xD = [x | x <- [1..567],check x == 1]
xD = [2,3,4,5,6,8,9,11,12,14,15,16,17,18,20,21,22,24,25,26,27,29,30,33,34,35,36,37,38,39,40,41,42,43,45,46,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,71,72,73,74,75,76,77,78,80,81,83,84,85,87,88,89,90,92,93,95,96,98,99,101,102,104,105,106,107,108,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,131,132,134,135,136,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,170,171,172,173,174,175,177,178,179,180,181,182,183,184,185,186,187,189,191,194,195,196,197,198,199,200,201,202,204,205,206,207,209,210,211,212,213,214,215,216,217,218,220,221,222,223,224,225,227,228,229,231,232,233,234,235,237,238,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,281,282,283,284,285,286,287,288,289,290,292,294,295,296,297,298,299,300,303,304,305,306,307,308,309,311,312,314,315,316,317,318,321,322,323,324,325,327,328,330,332,333,334,335,336,337,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,357,358,359,360,361,363,364,366,369,370,371,372,373,374,375,377,378,380,381,382,384,385,387,388,389,390,393,394,395,396,398,399,400,401,402,403,405,406,407,408,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,441,442,443,444,445,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,465,466,467,468,470,471,472,473,474,475,476,477,479,480,481,482,483,484,485,486,488,489,491,492,493,494,495,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,557,558,559,560,561,562,564,567]
main = print (checkF [1*10^6..2*10^6])

mf :: Integer -> (a->a)-> a -> a
mf 1 a x = a x
mf x a y = a (mf (x-1) a y)


--map (\xs@(x:_) -> (x, length xs)) . group . sort  $ (map next [1..1000000])